#ifndef MYACTUATOR_RMD_STATE_BROADCASTER__MYACTUATOR_RMD_STATE_BROADCASTER_HPP_
#define MYACTUATOR_RMD_STATE_BROADCASTER__MYACTUATOR_RMD_STATE_BROADCASTER_HPP_

#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#include "controller_interface/controller_interface.hpp"
#include "myactuator_rmd_state_broadcaster/visibility_control.h"
// auto-generated by generate_parameter_library
#include "myactuator_rmd_state_broadcaster_parameters.hpp"
#include "rclcpp_lifecycle/lifecycle_publisher.hpp"
#include "rclcpp_lifecycle/node_interfaces/lifecycle_node_interface.hpp"
#include "realtime_tools/realtime_publisher.h"
#include "myactuator_rmd_interfaces/msg/motor_status.hpp"
#include "semantic_components/semantic_component_interface.hpp"

namespace myactuator_rmd_state_broadcaster
{
class MyActuatorRmdStateBroadcaster : public controller_interface::ControllerInterface
{
public:
  MYACTUATOR_RMD_STATE_BROADCASTER_PUBLIC
  MyActuatorRmdStateBroadcaster();

  MYACTUATOR_RMD_STATE_BROADCASTER_PUBLIC
  controller_interface::InterfaceConfiguration command_interface_configuration() const override;

  MYACTUATOR_RMD_STATE_BROADCASTER_PUBLIC
  controller_interface::InterfaceConfiguration state_interface_configuration() const override;

  MYACTUATOR_RMD_STATE_BROADCASTER_PUBLIC
  controller_interface::return_type update(
    const rclcpp::Time & time, const rclcpp::Duration & period) override;

  MYACTUATOR_RMD_STATE_BROADCASTER_PUBLIC
  controller_interface::CallbackReturn on_init() override;

  MYACTUATOR_RMD_STATE_BROADCASTER_PUBLIC
  controller_interface::CallbackReturn on_configure(
    const rclcpp_lifecycle::State & previous_state) override;

  MYACTUATOR_RMD_STATE_BROADCASTER_PUBLIC
  controller_interface::CallbackReturn on_activate(
    const rclcpp_lifecycle::State & previous_state) override;

  MYACTUATOR_RMD_STATE_BROADCASTER_PUBLIC
  controller_interface::CallbackReturn on_deactivate(
    const rclcpp_lifecycle::State & previous_state) override;

protected:
  bool init_motor_data();
  void init_motor_state_msg();
  bool use_all_available_interfaces() const;

protected:
  // Optional parameters
  std::shared_ptr<ParamListener> param_listener_;
  Params params_;
  std::unordered_map<std::string, std::string> map_interface_to_motor_state_;
  std::unordered_map<std::string, std::unordered_map<std::string, double>> name_if_value_mapping_;
  std::vector<std::string> motor_names_;

  std::shared_ptr<rclcpp::Publisher<myactuator_rmd_interfaces::msg::MotorStatus>> motor_state_publisher_;
  std::shared_ptr<realtime_tools::RealtimePublisher<myactuator_rmd_interfaces::msg::MotorStatus>> realtime_motor_state_publisher_;
};

}  // namespace myactuator_rmd_state_broadcaster

#endif  // MYACTUATOR_RMD_STATE_BROADCASTER__MYACTUATOR_RMD_STATE_BROADCASTER_HPP_